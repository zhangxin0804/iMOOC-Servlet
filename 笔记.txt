1. 什么是Servlet?

	Servlet是在服务器端运行的Java编写的程序，运行于支持Java的应用服务器中。其主要功能在于交互式的浏览和修改数据，生成动态WEB内容。一个Servlet
程序就是一个Java类，该类实现了Servlet接口。并且可以根据 “请求-响应”编程模型来访问的驻留在服务器内存里的Servlet实例。

	注意：先有Servlet，再有JSP. 换句话说JSP的前身就是Servlet. (回想一下JSP页面的生命周期！！涉及到JSP转化成Servlet的过程！！)



2. Tomcat容器等级 
	
	Tomcat的容器分为4个等级,分别是：Engine, Host, Context, Wrapper. 类似box model, 从左到右，一层一层包住。整体可以看做有一个大的容器
包住了这4个容器，如虚线Container所示。然后，还可以看做有一个Servlet容器包住了Context容器和Wrapper容器，如虚线所示。
	
	注意：Servlet容器内可以有多个Context容器(多个Web工程)，Context容器内可以有多个Wrapper容器(一个工程内的多个访问资源)。
	
	假设访问的URL是 http://www.mydomain.com/app/index.html, 则Wrapper容器管理具体的访问资源,例如 index.html；Context容器管理各个
wrapper资源的集合,例如 app, 一个Context对应一个Web工程; Host容器管理各个context资源的集合相当于就是管理多个web工程,例如 
www.mydomain.com可以管理下一级的app1或者app2等。

	注意：具体多看看图！！http://xiaobaoqiu.github.io/blog/2015/03/18/tomcatjia-gou/




3. 手工编写一个Servlet

	首先我们要了解一些class hierarchy的信息，如下所示：

	Servlet(interface)    ----->   三个方法： init(), service(), destroy()
		🔼
	GenericServlet(abstract class) -----> 与协议无关的Servlet, implements实现了Servlet接口。
		🔼
	HttpServlet(abstract class) ------->  实现了HTTP协议的Servlet, 仍然是抽象类要被继承。
		🔼
	自定义Servlet		---------->  要继承HttpServlet, 并override重写 doGet()与doPost()方法。(我们要编写的内容！！！)


	step1: 继承HttpServlet抽象类
	step2: 重写doGet()或者doPost()方法, 取决于用户提交请求的方式。get和post的区别可以参考JSP的笔记。实际上是调用了service()方法。
	step3: 在工程项目的WEB-INF目录下的web.xml项目部署文件中注册Servlet, 要配置两个标签，其中在每个标签中还要配置子标签。(重要！！！！)

		<servlet>
			<servlet-name>HelloServlet</servlet-name>   
			<servlet-class>packageName.HelloServlet</servlet-class>
		</servlet>

		<servlet-mapping>
			<servlet-name>HelloServlet</servlet-name>
			<url-pattern>/servlet/HelloServlet</url-pattern>
		</servlet-mapping>

		/******************************************************************************************/
		<servlet-name>, 表示给这个Servlet起一个名字, 注意不管是在<servlet>大标签还是<servlet-mapping>大标签，要一一对应！！！
		<servlet-class>, 表示要访问的Servlet所在的类, 类名要完整如果在某个package下，还要写package名字。
		<url-pattern>, 表示HelloServlet这个Servlet被访问的路径，要和请求的链接地址一一对应。
		               Don't forget the forward slash(/) in the url-pattern.

		http://stackoverflow.com/questions/28315618/why-should-url-pattern-in-servlet-mapping-start-with-forward-slash
		/******************************************************************************************/

	具体可以再看看  www.imooc.com/video/5537     
	注意视频中用的MyEclipse, 跟Eclipse J2EE有差别！！！使用MyEclipse IDE，创建servlet时会帮助我们直接注册Servlet.


	注意：Servlet类中，给浏览器输出的对象是PrinterWrite类型的！！可以通过 response.getWriter()得到，同时还需要import相应的类
	     import java.io.PrintWriter;



4. 相对URL
	
	客户端的请求有get请求和post请求，其中get请求可以直接通过超级链接来实现，如下所示：
	<a href = "servlet/HelloServlet">Get方式请求HelloServlet</a><br>

	注意：这里我们是通过get方式去请求一个Servlet程序，因此这里的请求链接要与web.xml中的Servlet的注册也即<url-pattern>要一致，这样才能
够找到相应的Servlet对应的那个class去执行doGet()方法。直接用相对URL的方式访问即可, 不需要项目所在根目录的那个forward slash /

	注意：之所以这里可以访问这个虚拟路径，是因为我们在web.xml中注册servlet时，设定了<url-pattern>, 所以又进一步告诉我们，请求的url
要与web.xml中注册的那个<url-pattern>要保持一致！！！！！Don't forget the forward slash(/) in the url-pattern.



5. 如果是使用MyEclipse IDE的话，创建servlet时会帮助我们直接注册Servlet, 不需要手动去配置web.xml并注册servlet.


6. Servlet执行流程 (以get请求方式为例, ************重要***********)

	既然是Servlet执行流程，就意味着该Servlet已经加载到容器中，并调用构造函数实例化了对象，然后执行了初始化init()方法。然后才是下面的
过程。
	【1】Get方式请求HelloServlet, 以超级链接方式提交<a href = "servlet/HelloServlet">, 注意这里是一个虚拟路径。
	【2】服务器去web.xml中，在<servlet-mapping>标签中的<url-pattern>中寻找与之对应的url地址，/servlet/HelloServlet
	【3】然后再去<servlet>标签中的<servlet-name>标签中，寻找与之前名字一致的对应的处理类<servlet-class>
	【4】于是就可以找到对应的处理类，然后根据请求方式去执行类中重写的doGet()或者doPost()方法。

7. Servlet生命周期 (************重要***********)
		
	【0】最最开始要先调用自定义Servlet类的构造方法，生成Servlet的实例！！！相当于先加载Servlet ！！
	【1】初始化阶段，调用init()方法。
	【2】响应客户端请求，调用service()方法。由service()方法根据提交方式选择执行doGet()或者doPost()方法。
	【3】服务器终止shutdown时，调用destroy()方法。

	注意：具体的可以参考 Servlet生命周期.png
	注意：回想Servlet class hierarch, 最顶层的Servlet接口中的三大方法就是 init(), service()和destroy()

	参考：http://7xph6d.com1.z0.glb.clouddn.com/javaweb_servlet-lifecycle.png




8. 编写Servlet的doGet()和doPost()方法时，需要抛出 ServletException 和 IOException





9. Tomcat容器加载Servlet的几种情况。

	【1】Servlet容器启动时自动装载某些Servlet, 实现它只需要在web.xml文件中的<Servlet></Servlet>之间，添加如下代码：
<loadon-startup>1</loadon-startup>, 数字越小表示优先级别越高。自动装载后，意味着已经创建了Servlet实例，并执行了初始化init()方法。

	【2】在Servlet容器启动后，客户首次向Servlet发送请求，此时Servlet被加载。(比较常见)

	【3】Servlet类文件被更新后，重新装载Servlet，也会重新编译这个Servlet类。

	Servelet一旦被加载后，Servelet容器调用构造方法创建一个Servlet实例, 并且调用init()方法进行初始化。在Servlet的整个生命周期内，
init()方法只被调用一次。Servlet实例是长期驻留在服务器的内存当中的, 当服务器shutdown时会调用destroy()方法，销毁这个Servlet实例。
	对于情况【1】, Servlet被自动装载意味着他们的实例被创建，且执行了init()初始化方法。


	！！！总结 ！！！所谓的Servlet加载的过程就是通过调用构造函数实例化了一个自定义Servlet类的对象，并且执行了其中的初始化init()方法！！！





10. Servlet与9大JSP内置对象的对应关系

	JSP对象                                   Servlet中怎样获得
	---------------------------------------------------------------
	out										   response.getWriter()
	request									   service()方法中的request参数
	response								   service()方法中的response参数
	session									   request.getSession()函数
	application								   getServletContext()函数
	exception 								   hrowable
	page    								   this
	pageContext 							   PageContext
	config									   getServletConfig()






11. 如何从Servlet获取表单数据？






12. response.setContentType("")
	
	作用是使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。如果该方法在getWriter()方法
被调用之前调用，那么响应的字符编码将仅从给出的内容类型中设置。该方法如果在getWriter()方法被调用之后或者在被提交之后调用，将不会设置响应的
字符编码。







13. 如何通过Servlet获取初始化参数？

	在项目的WEB-INF目录下的项目部署文件web.xml中配置Servlet时，可以配置一些初始化参数。而在Servlet中可以通过ServletConfig接口提供的方法
来获取这些初始化的参数。配置初始化参数如下所示, 一个初始化参数对应一对儿 <init-param></init-param>, 然后name-value pair是同时对应配置的：

						<servlet>
						  ............
					      <init-param>
					      	<param-name>username</param-name>
					      	<param-value>zhangsan</param-value>
					      </init-param>

					      <init-param>
					      	<param-name>password</param-name>
					      	<param-value>123456</param-value>
					      </init-param>
					      ............
					    </servlet>



	具体的获取初始化参数value的方法API是： this.getInitParameter("param-name"), 参数是在web.xml中配置的对应的param-name标签的值。

	点击该方法open implementation时可以得到下面的关系，说明这个方法最初是在ServletConfig接口中定义的，然后在GenericServlet这个抽象类
中实现的，然后再由我们的自定义类继承下来的。
	public abstract class javax.servlet.GenericServlet implements javax.servlet.Servlet, 
	                                                              javax.servlet.ServletConfig, java.io.Serializable 


	注意：
	-- 这个例子说明了几个问题，首先WEB-INF目录下的项目部署文件web.xml里的信息，是随着工程中的自定义Servlet被加载时才把信息传递进去的，正因
       为自定义Servlet被加载时会通过调用构造函数来实例化自定义Servlet类的对象，然后会去调用初始化init()方法，所以我们在init()方法中获取
       到这些初始化的值来作为其他用途。

    -- 问题的核心又回到了，该自定义Servlet何时被加载，可以参考上面的笔记！！！比较常见的是，客户首次向Servlet发送请求，此时Servlet被加载。

    -- 获取初始化参数这样做的好处是，可以把一些初始化的工作 配置在web.xml中，减少自定义Servlet类中代码的编写，more clean.




14. 商品浏览记录 + 购物车 开发案例
	
	背景介绍
	在我们浏览电子商务类网站时，会看到很多商品列表，展示不同的商品。当我们点击了一个商品后，在网站的某个部位会详细展示出我们最近浏览过的商品
信息。在一段时间内，我们多次登录该网站后，都应该显示出最近浏览的记录，因此可以考虑利用Cookie技术来实现这个功能。

	实现DBHelper类
	一般来说，我们的商品信息都是存储于数据库中的，因此这里我们服务器端涉及到与数据库的通信，因此需要借助JDBC即java数据库连接技术来帮助实现。
因此，我们需要实现一个工具util类即DBHelper类，来查询数据库中的商品表，获得商品信息。注意：不再是以往的静态方式展现数据内容了！！

	创建实体类
	实体类实际上是和数据库中的内容一一对应的，相当于是一个商品类。数据库中记录着每一个商品的详细信息，比如商品名称，产地，大小，价格，等等。
我们通过实体类，来用面向对象的思想，对这些数据进行封装。

	创建业务逻辑类 (DAO)  ---- JavaBeans
	通过JavaBeans, 来封装针对商品的一些业务逻辑，比如：查询所有商品，根据商品编号查询指定商品，以及从Cookie中获取保存的字符串，从而获得最近
浏览的商品记录的集合。

	创建页面层


	· DBHelper类设计
	-- 涉及到JDBC技术的使用，因此JDBC Driver这个jar包需要导入到WEB工程中，要放在WEB-INF目录下的lib文件夹下。
	-- DBHelper类的设计，可以采用 单例模式singleton模式的方式，其中分为eager-mode和lazy-mode, 具体可以看笔记总结。之所以考虑单例模式
	   也是因为我们的数据库连接对象，每次都应该是一样的，因此没有必要实例化多次，只需要一个对象即可。


	· 商品实体类设计
	-- 我们说此项目中，商品信息是保存在数据库中的，因此我们要先通sql脚本的运行，在MySQL中完成建表的过程，这样才有了数据。
	-- 因为商品实体类是与数据库中内容一一对应的，所以我们可以根据数据库中表的column信息，来定义该类的属性和方法。
	-- JavaBeans的思想，私有属性，setter getter方法封装。


	· 业务逻辑类设计(Dao层)
	-- 查询所有商品
	-- 注意理解业务逻辑的含义


	· 所有商品信息显示
	-- 由于我们的商品实体封装了商品信息，同时业务逻辑类即Dao层实现了一些相关功能，因此可以在JSP页面中，通过JSP脚本来展示所有商品信息。
	-- JSP页面首先要通过page指令，将相关java类import进来。然后通过JSP脚本，以及HTML，循环输出商品list.
	-- 可以看看CartDemo里的index.jsp的实现。


	· 显示商品详情
	-- 根据商品编号，获得商品资料。点击商品后，会请求另一个JSP页面，我们通过<a href="">标签来进行跳转，同时将点击商品的id也作为参数在url中
	   请求出去。
	-- 在details.jsp页面中负责接收刚才提到的请求，然后通过Dao层来处理该业务逻辑。此时需要借助request对象来得到我们通过URL传递过来的id的值
	-- 可以看看CartDemo里的details.jsp的实现。


	· 如何把浏览记录保存在Cookie中？
	-- 浏览记录实际上，我们只需要保存商品的id就可以了，因为id是唯一的，只要获得了id，就获得了商品的信息。
	-- 用户每一次点击商品时，会将id传到details.jsp页面中，因此可以考虑在这个页面中通过Cookie来保存。也即把每次浏览的商品编号，保存在字符串中
	   ，编号和编号之间用分隔符分割，每次取出前5条记录。
	-- 因为我们知道Cookie就是字符串，我们用一个字符串来记录浏览过的商品的id, 然后用逗号进行分隔。
	-- 接下来要编写业务逻辑层Dao, 来得到具体的最近浏览过的5个商品的信息情况。然后保存在一个ArrayList中
	-- 再回到index.jsp中，通过jsp脚本调用业务逻辑Dao层的方法，得到信息，再结合HTML输出显示。






	MVC模型实现 (JSP + Servlet + Dao)
	· 创建购物车类
	· 编写Servlet
	· 创建页面层














